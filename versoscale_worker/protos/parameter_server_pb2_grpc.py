# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import coordinator_pb2 as coordinator__pb2
from . import parameter_server_pb2 as parameter__server__pb2


class ParameterServerServiceStub(object):
    """Service definition for the Parameter Server.
    REFACTORED: This service is updated to align with the stream-based,
    tenant-aware implementation used by the servicer and the client. It now
    supports granular, chunked transmission of parameters and gradients.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PullParameters = channel.unary_stream(
                '/versoscale.ParameterServerService/PullParameters',
                request_serializer=parameter__server__pb2.PullRequest.SerializeToString,
                response_deserializer=parameter__server__pb2.ParameterChunk.FromString,
                )
        self.PushGradients = channel.stream_unary(
                '/versoscale.ParameterServerService/PushGradients',
                request_serializer=parameter__server__pb2.GradientChunk.SerializeToString,
                response_deserializer=parameter__server__pb2.PushAck.FromString,
                )
        self.SyncParameters = channel.stream_unary(
                '/versoscale.ParameterServerService/SyncParameters',
                request_serializer=parameter__server__pb2.ParameterChunk.SerializeToString,
                response_deserializer=coordinator__pb2.SyncAck.FromString,
                )


class ParameterServerServiceServicer(object):
    """Service definition for the Parameter Server.
    REFACTORED: This service is updated to align with the stream-based,
    tenant-aware implementation used by the servicer and the client. It now
    supports granular, chunked transmission of parameters and gradients.
    """

    def PullParameters(self, request, context):
        """A worker pulls the latest model parameters for its specific tenant.
        This is a server-streaming RPC to handle large models efficiently.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushGradients(self, request_iterator, context):
        """A worker pushes calculated gradients to the server for its tenant.
        This is a client-streaming RPC to handle large gradients efficiently.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncParameters(self, request_iterator, context):
        """An internal RPC for one Parameter Server instance to replicate its state
        to another in an Active-Active high-availability configuration.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ParameterServerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PullParameters': grpc.unary_stream_rpc_method_handler(
                    servicer.PullParameters,
                    request_deserializer=parameter__server__pb2.PullRequest.FromString,
                    response_serializer=parameter__server__pb2.ParameterChunk.SerializeToString,
            ),
            'PushGradients': grpc.stream_unary_rpc_method_handler(
                    servicer.PushGradients,
                    request_deserializer=parameter__server__pb2.GradientChunk.FromString,
                    response_serializer=parameter__server__pb2.PushAck.SerializeToString,
            ),
            'SyncParameters': grpc.stream_unary_rpc_method_handler(
                    servicer.SyncParameters,
                    request_deserializer=parameter__server__pb2.ParameterChunk.FromString,
                    response_serializer=coordinator__pb2.SyncAck.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'versoscale.ParameterServerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ParameterServerService(object):
    """Service definition for the Parameter Server.
    REFACTORED: This service is updated to align with the stream-based,
    tenant-aware implementation used by the servicer and the client. It now
    supports granular, chunked transmission of parameters and gradients.
    """

    @staticmethod
    def PullParameters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/versoscale.ParameterServerService/PullParameters',
            parameter__server__pb2.PullRequest.SerializeToString,
            parameter__server__pb2.ParameterChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PushGradients(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/versoscale.ParameterServerService/PushGradients',
            parameter__server__pb2.GradientChunk.SerializeToString,
            parameter__server__pb2.PushAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SyncParameters(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/versoscale.ParameterServerService/SyncParameters',
            parameter__server__pb2.ParameterChunk.SerializeToString,
            coordinator__pb2.SyncAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
