# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import coordinator_pb2 as coordinator__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class CoordinatorServiceStub(object):
    """Service definition for the Training Coordinator.
    This service orchestrates the distributed training process, manages workers,
    handles job submissions from tenants, and ensures the overall integrity
    and state of the system.
    --- Worker Lifecycle and Communication ---
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterWorker = channel.unary_unary(
                '/versoscale.CoordinatorService/RegisterWorker',
                request_serializer=coordinator__pb2.WorkerRegistrationRequest.SerializeToString,
                response_deserializer=coordinator__pb2.RegistrationAck.FromString,
                )
        self.SendHeartbeat = channel.unary_unary(
                '/versoscale.CoordinatorService/SendHeartbeat',
                request_serializer=coordinator__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=coordinator__pb2.HeartbeatResponse.FromString,
                )
        self.RequestWork = channel.unary_unary(
                '/versoscale.CoordinatorService/RequestWork',
                request_serializer=coordinator__pb2.WorkRequest.SerializeToString,
                response_deserializer=coordinator__pb2.WorkResponse.FromString,
                )
        self.MarkShardComplete = channel.unary_unary(
                '/versoscale.CoordinatorService/MarkShardComplete',
                request_serializer=coordinator__pb2.ShardCompletionRequest.SerializeToString,
                response_deserializer=coordinator__pb2.ShardCompletionAck.FromString,
                )
        self.SubmitJob = channel.unary_unary(
                '/versoscale.CoordinatorService/SubmitJob',
                request_serializer=coordinator__pb2.SubmitJobRequest.SerializeToString,
                response_deserializer=coordinator__pb2.JobStatusResponse.FromString,
                )
        self.GetJobStatus = channel.unary_unary(
                '/versoscale.CoordinatorService/GetJobStatus',
                request_serializer=coordinator__pb2.GetJobStatusRequest.SerializeToString,
                response_deserializer=coordinator__pb2.JobStatusResponse.FromString,
                )
        self.ListJobs = channel.unary_stream(
                '/versoscale.CoordinatorService/ListJobs',
                request_serializer=coordinator__pb2.ListJobsRequest.SerializeToString,
                response_deserializer=coordinator__pb2.Job.FromString,
                )
        self.CancelJob = channel.unary_unary(
                '/versoscale.CoordinatorService/CancelJob',
                request_serializer=coordinator__pb2.CancelJobRequest.SerializeToString,
                response_deserializer=coordinator__pb2.JobStatusResponse.FromString,
                )
        self.SubmitHPOTrials = channel.stream_unary(
                '/versoscale.CoordinatorService/SubmitHPOTrials',
                request_serializer=coordinator__pb2.HPOTrial.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ReportHPOTrialResult = channel.unary_unary(
                '/versoscale.CoordinatorService/ReportHPOTrialResult',
                request_serializer=coordinator__pb2.HPOResult.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.GetBestHPOTrial = channel.unary_unary(
                '/versoscale.CoordinatorService/GetBestHPOTrial',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=coordinator__pb2.HPOResult.FromString,
                )
        self.GetHPOStatus = channel.unary_unary(
                '/versoscale.CoordinatorService/GetHPOStatus',
                request_serializer=coordinator__pb2.HPOStatusRequest.SerializeToString,
                response_deserializer=coordinator__pb2.HPOStatusResponse.FromString,
                )
        self.StartTrainingPhase = channel.unary_unary(
                '/versoscale.CoordinatorService/StartTrainingPhase',
                request_serializer=coordinator__pb2.StartTrainingPhaseRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.SyncState = channel.unary_unary(
                '/versoscale.CoordinatorService/SyncState',
                request_serializer=coordinator__pb2.StateSnapshot.SerializeToString,
                response_deserializer=coordinator__pb2.SyncAck.FromString,
                )


class CoordinatorServiceServicer(object):
    """Service definition for the Training Coordinator.
    This service orchestrates the distributed training process, manages workers,
    handles job submissions from tenants, and ensures the overall integrity
    and state of the system.
    --- Worker Lifecycle and Communication ---
    """

    def RegisterWorker(self, request, context):
        """A new or existing worker joins or renews its certificate with the cluster.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendHeartbeat(self, request, context):
        """A worker periodically reports its status to the Coordinator to signal
        that it is still alive and available for work.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestWork(self, request, context):
        """A stateless worker requests its next unit of work from the Coordinator.
        The Coordinator dispatches work based on the current system-wide phase.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarkShardComplete(self, request, context):
        """A worker reports that it has successfully completed processing a shard.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitJob(self, request, context):
        """--- Tenant-Facing Job Management ---

        A tenant submits a new training job to the platform.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetJobStatus(self, request, context):
        """A tenant retrieves the current status and metadata of a specific job.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListJobs(self, request, context):
        """A tenant lists all of their current and past jobs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelJob(self, request, context):
        """A tenant requests to cancel a currently running job.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitHPOTrials(self, request_iterator, context):
        """--- Hyperparameter Optimization (HPO) and Phase Transitions ---

        The HPO orchestrator submits a batch of trials to be executed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportHPOTrialResult(self, request, context):
        """A worker reports the result of a completed HPO trial.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBestHPOTrial(self, request, context):
        """The HPO orchestrator requests the best trial result found so far.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHPOStatus(self, request, context):
        """The HPO orchestrator polls this endpoint to check if all trials are complete.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartTrainingPhase(self, request, context):
        """The HPO orchestrator triggers the system-wide transition from TUNING to TRAINING.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncState(self, request, context):
        """--- Internal High-Availability RPC ---

        The active Coordinator instance pushes its state to a passive (standby) instance.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoordinatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterWorker,
                    request_deserializer=coordinator__pb2.WorkerRegistrationRequest.FromString,
                    response_serializer=coordinator__pb2.RegistrationAck.SerializeToString,
            ),
            'SendHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.SendHeartbeat,
                    request_deserializer=coordinator__pb2.HeartbeatRequest.FromString,
                    response_serializer=coordinator__pb2.HeartbeatResponse.SerializeToString,
            ),
            'RequestWork': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestWork,
                    request_deserializer=coordinator__pb2.WorkRequest.FromString,
                    response_serializer=coordinator__pb2.WorkResponse.SerializeToString,
            ),
            'MarkShardComplete': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkShardComplete,
                    request_deserializer=coordinator__pb2.ShardCompletionRequest.FromString,
                    response_serializer=coordinator__pb2.ShardCompletionAck.SerializeToString,
            ),
            'SubmitJob': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitJob,
                    request_deserializer=coordinator__pb2.SubmitJobRequest.FromString,
                    response_serializer=coordinator__pb2.JobStatusResponse.SerializeToString,
            ),
            'GetJobStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetJobStatus,
                    request_deserializer=coordinator__pb2.GetJobStatusRequest.FromString,
                    response_serializer=coordinator__pb2.JobStatusResponse.SerializeToString,
            ),
            'ListJobs': grpc.unary_stream_rpc_method_handler(
                    servicer.ListJobs,
                    request_deserializer=coordinator__pb2.ListJobsRequest.FromString,
                    response_serializer=coordinator__pb2.Job.SerializeToString,
            ),
            'CancelJob': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelJob,
                    request_deserializer=coordinator__pb2.CancelJobRequest.FromString,
                    response_serializer=coordinator__pb2.JobStatusResponse.SerializeToString,
            ),
            'SubmitHPOTrials': grpc.stream_unary_rpc_method_handler(
                    servicer.SubmitHPOTrials,
                    request_deserializer=coordinator__pb2.HPOTrial.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ReportHPOTrialResult': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportHPOTrialResult,
                    request_deserializer=coordinator__pb2.HPOResult.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetBestHPOTrial': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBestHPOTrial,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=coordinator__pb2.HPOResult.SerializeToString,
            ),
            'GetHPOStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHPOStatus,
                    request_deserializer=coordinator__pb2.HPOStatusRequest.FromString,
                    response_serializer=coordinator__pb2.HPOStatusResponse.SerializeToString,
            ),
            'StartTrainingPhase': grpc.unary_unary_rpc_method_handler(
                    servicer.StartTrainingPhase,
                    request_deserializer=coordinator__pb2.StartTrainingPhaseRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'SyncState': grpc.unary_unary_rpc_method_handler(
                    servicer.SyncState,
                    request_deserializer=coordinator__pb2.StateSnapshot.FromString,
                    response_serializer=coordinator__pb2.SyncAck.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'versoscale.CoordinatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CoordinatorService(object):
    """Service definition for the Training Coordinator.
    This service orchestrates the distributed training process, manages workers,
    handles job submissions from tenants, and ensures the overall integrity
    and state of the system.
    --- Worker Lifecycle and Communication ---
    """

    @staticmethod
    def RegisterWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.CoordinatorService/RegisterWorker',
            coordinator__pb2.WorkerRegistrationRequest.SerializeToString,
            coordinator__pb2.RegistrationAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.CoordinatorService/SendHeartbeat',
            coordinator__pb2.HeartbeatRequest.SerializeToString,
            coordinator__pb2.HeartbeatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestWork(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.CoordinatorService/RequestWork',
            coordinator__pb2.WorkRequest.SerializeToString,
            coordinator__pb2.WorkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MarkShardComplete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.CoordinatorService/MarkShardComplete',
            coordinator__pb2.ShardCompletionRequest.SerializeToString,
            coordinator__pb2.ShardCompletionAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubmitJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.CoordinatorService/SubmitJob',
            coordinator__pb2.SubmitJobRequest.SerializeToString,
            coordinator__pb2.JobStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetJobStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.CoordinatorService/GetJobStatus',
            coordinator__pb2.GetJobStatusRequest.SerializeToString,
            coordinator__pb2.JobStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListJobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/versoscale.CoordinatorService/ListJobs',
            coordinator__pb2.ListJobsRequest.SerializeToString,
            coordinator__pb2.Job.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.CoordinatorService/CancelJob',
            coordinator__pb2.CancelJobRequest.SerializeToString,
            coordinator__pb2.JobStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubmitHPOTrials(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/versoscale.CoordinatorService/SubmitHPOTrials',
            coordinator__pb2.HPOTrial.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReportHPOTrialResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.CoordinatorService/ReportHPOTrialResult',
            coordinator__pb2.HPOResult.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBestHPOTrial(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.CoordinatorService/GetBestHPOTrial',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            coordinator__pb2.HPOResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHPOStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.CoordinatorService/GetHPOStatus',
            coordinator__pb2.HPOStatusRequest.SerializeToString,
            coordinator__pb2.HPOStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartTrainingPhase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.CoordinatorService/StartTrainingPhase',
            coordinator__pb2.StartTrainingPhaseRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SyncState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.CoordinatorService/SyncState',
            coordinator__pb2.StateSnapshot.SerializeToString,
            coordinator__pb2.SyncAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
