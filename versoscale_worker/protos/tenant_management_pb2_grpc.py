# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from . import tenant_management_pb2 as tenant__management__pb2


class TenantManagementServiceStub(object):
    """Service definition for the Tenant & User Management Service.
    This service is the central authority for all multi-tenancy constructs
    within the VersoScale platform. As outlined in the enterprise roadmap, it is
    responsible for the entire lifecycle of tenants, the users within them, and
    the resources they are allocated.

    It handles:
    - Tenant Lifecycle: Onboarding, configuration, and offboarding of customer organizations.
    - User Management: Provisioning users within a tenant and managing their roles (RBAC).
    - Resource Quotas: Enforcing limits on jobs, workers, and compute time.
    - Private Compute: Managing tenant-specific worker groups for BYOC deployments.
    - Authentication: Managing API keys for programmatic access to the platform.
    --- NEW Unauthenticated Onboarding Method ---
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OnboardNewTenant = channel.unary_unary(
                '/versoscale.TenantManagementService/OnboardNewTenant',
                request_serializer=tenant__management__pb2.OnboardNewTenantRequest.SerializeToString,
                response_deserializer=tenant__management__pb2.OnboardNewTenantResponse.FromString,
                )
        self.CreateTenant = channel.unary_unary(
                '/versoscale.TenantManagementService/CreateTenant',
                request_serializer=tenant__management__pb2.CreateTenantRequest.SerializeToString,
                response_deserializer=tenant__management__pb2.Tenant.FromString,
                )
        self.GetTenant = channel.unary_unary(
                '/versoscale.TenantManagementService/GetTenant',
                request_serializer=tenant__management__pb2.GetTenantRequest.SerializeToString,
                response_deserializer=tenant__management__pb2.Tenant.FromString,
                )
        self.UpdateTenant = channel.unary_unary(
                '/versoscale.TenantManagementService/UpdateTenant',
                request_serializer=tenant__management__pb2.UpdateTenantRequest.SerializeToString,
                response_deserializer=tenant__management__pb2.Tenant.FromString,
                )
        self.DeleteTenant = channel.unary_unary(
                '/versoscale.TenantManagementService/DeleteTenant',
                request_serializer=tenant__management__pb2.DeleteTenantRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.UpdateTenantConfiguration = channel.unary_unary(
                '/versoscale.TenantManagementService/UpdateTenantConfiguration',
                request_serializer=tenant__management__pb2.UpdateTenantConfigurationRequest.SerializeToString,
                response_deserializer=tenant__management__pb2.TenantConfiguration.FromString,
                )
        self.AddUserToTenant = channel.unary_unary(
                '/versoscale.TenantManagementService/AddUserToTenant',
                request_serializer=tenant__management__pb2.AddUserToTenantRequest.SerializeToString,
                response_deserializer=tenant__management__pb2.User.FromString,
                )
        self.GetUser = channel.unary_unary(
                '/versoscale.TenantManagementService/GetUser',
                request_serializer=tenant__management__pb2.GetUserRequest.SerializeToString,
                response_deserializer=tenant__management__pb2.User.FromString,
                )
        self.ListUsers = channel.unary_unary(
                '/versoscale.TenantManagementService/ListUsers',
                request_serializer=tenant__management__pb2.ListUsersRequest.SerializeToString,
                response_deserializer=tenant__management__pb2.ListUsersResponse.FromString,
                )
        self.RemoveUserFromTenant = channel.unary_unary(
                '/versoscale.TenantManagementService/RemoveUserFromTenant',
                request_serializer=tenant__management__pb2.RemoveUserFromTenantRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.CreateApiKey = channel.unary_unary(
                '/versoscale.TenantManagementService/CreateApiKey',
                request_serializer=tenant__management__pb2.CreateApiKeyRequest.SerializeToString,
                response_deserializer=tenant__management__pb2.CreateApiKeyResponse.FromString,
                )
        self.ListApiKeys = channel.unary_unary(
                '/versoscale.TenantManagementService/ListApiKeys',
                request_serializer=tenant__management__pb2.ListApiKeysRequest.SerializeToString,
                response_deserializer=tenant__management__pb2.ListApiKeysResponse.FromString,
                )
        self.DeleteApiKey = channel.unary_unary(
                '/versoscale.TenantManagementService/DeleteApiKey',
                request_serializer=tenant__management__pb2.DeleteApiKeyRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.CreateWorkerGroup = channel.unary_unary(
                '/versoscale.TenantManagementService/CreateWorkerGroup',
                request_serializer=tenant__management__pb2.CreateWorkerGroupRequest.SerializeToString,
                response_deserializer=tenant__management__pb2.PrivateWorkerGroup.FromString,
                )
        self.ListWorkerGroups = channel.unary_unary(
                '/versoscale.TenantManagementService/ListWorkerGroups',
                request_serializer=tenant__management__pb2.ListWorkerGroupsRequest.SerializeToString,
                response_deserializer=tenant__management__pb2.ListWorkerGroupsResponse.FromString,
                )
        self.DeleteWorkerGroup = channel.unary_unary(
                '/versoscale.TenantManagementService/DeleteWorkerGroup',
                request_serializer=tenant__management__pb2.DeleteWorkerGroupRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class TenantManagementServiceServicer(object):
    """Service definition for the Tenant & User Management Service.
    This service is the central authority for all multi-tenancy constructs
    within the VersoScale platform. As outlined in the enterprise roadmap, it is
    responsible for the entire lifecycle of tenants, the users within them, and
    the resources they are allocated.

    It handles:
    - Tenant Lifecycle: Onboarding, configuration, and offboarding of customer organizations.
    - User Management: Provisioning users within a tenant and managing their roles (RBAC).
    - Resource Quotas: Enforcing limits on jobs, workers, and compute time.
    - Private Compute: Managing tenant-specific worker groups for BYOC deployments.
    - Authentication: Managing API keys for programmatic access to the platform.
    --- NEW Unauthenticated Onboarding Method ---
    """

    def OnboardNewTenant(self, request, context):
        """Onboards a new tenant and creates their first admin API key.
        This is designed to be called without any prior authentication to allow
        for a self-service, streamlined sign-up process.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTenant(self, request, context):
        """--- Tenant Lifecycle Management ---

        Creates a new tenant in the system. This is the first step for onboarding
        a new customer organization.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTenant(self, request, context):
        """Retrieves the details of a specific tenant by its ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTenant(self, request, context):
        """Updates a tenant's mutable properties, such as its name or status.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTenant(self, request, context):
        """Deletes a tenant. This is a destructive action and should be used with caution.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTenantConfiguration(self, request, context):
        """Updates the configuration for a specific tenant, including resource quotas
        and other tenant-wide settings.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddUserToTenant(self, request, context):
        """--- User Management ---

        Adds a new user to an existing tenant.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUser(self, request, context):
        """Retrieves the details of a user within a tenant.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUsers(self, request, context):
        """Lists all users belonging to a specific tenant.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveUserFromTenant(self, request, context):
        """Removes a user from a tenant.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateApiKey(self, request, context):
        """--- API Key Management for Programmatic Access ---

        Creates a new API key for a user within a tenant. The returned secret key
        is only shown once and must be stored securely by the client.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListApiKeys(self, request, context):
        """Lists metadata for all API keys associated with a user or tenant.
        The secret keys are not returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteApiKey(self, request, context):
        """Revokes an API key, immediately invalidating it.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateWorkerGroup(self, request, context):
        """--- Private Worker Group Management (for BYOC) ---

        Creates a new Private Worker Group for a tenant, allowing them to register
        their own compute resources for dedicated job processing.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWorkerGroups(self, request, context):
        """Lists all Private Worker Groups owned by a tenant.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteWorkerGroup(self, request, context):
        """Deletes a Private Worker Group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TenantManagementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OnboardNewTenant': grpc.unary_unary_rpc_method_handler(
                    servicer.OnboardNewTenant,
                    request_deserializer=tenant__management__pb2.OnboardNewTenantRequest.FromString,
                    response_serializer=tenant__management__pb2.OnboardNewTenantResponse.SerializeToString,
            ),
            'CreateTenant': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTenant,
                    request_deserializer=tenant__management__pb2.CreateTenantRequest.FromString,
                    response_serializer=tenant__management__pb2.Tenant.SerializeToString,
            ),
            'GetTenant': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTenant,
                    request_deserializer=tenant__management__pb2.GetTenantRequest.FromString,
                    response_serializer=tenant__management__pb2.Tenant.SerializeToString,
            ),
            'UpdateTenant': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTenant,
                    request_deserializer=tenant__management__pb2.UpdateTenantRequest.FromString,
                    response_serializer=tenant__management__pb2.Tenant.SerializeToString,
            ),
            'DeleteTenant': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTenant,
                    request_deserializer=tenant__management__pb2.DeleteTenantRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'UpdateTenantConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTenantConfiguration,
                    request_deserializer=tenant__management__pb2.UpdateTenantConfigurationRequest.FromString,
                    response_serializer=tenant__management__pb2.TenantConfiguration.SerializeToString,
            ),
            'AddUserToTenant': grpc.unary_unary_rpc_method_handler(
                    servicer.AddUserToTenant,
                    request_deserializer=tenant__management__pb2.AddUserToTenantRequest.FromString,
                    response_serializer=tenant__management__pb2.User.SerializeToString,
            ),
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=tenant__management__pb2.GetUserRequest.FromString,
                    response_serializer=tenant__management__pb2.User.SerializeToString,
            ),
            'ListUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUsers,
                    request_deserializer=tenant__management__pb2.ListUsersRequest.FromString,
                    response_serializer=tenant__management__pb2.ListUsersResponse.SerializeToString,
            ),
            'RemoveUserFromTenant': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveUserFromTenant,
                    request_deserializer=tenant__management__pb2.RemoveUserFromTenantRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'CreateApiKey': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateApiKey,
                    request_deserializer=tenant__management__pb2.CreateApiKeyRequest.FromString,
                    response_serializer=tenant__management__pb2.CreateApiKeyResponse.SerializeToString,
            ),
            'ListApiKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.ListApiKeys,
                    request_deserializer=tenant__management__pb2.ListApiKeysRequest.FromString,
                    response_serializer=tenant__management__pb2.ListApiKeysResponse.SerializeToString,
            ),
            'DeleteApiKey': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteApiKey,
                    request_deserializer=tenant__management__pb2.DeleteApiKeyRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'CreateWorkerGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWorkerGroup,
                    request_deserializer=tenant__management__pb2.CreateWorkerGroupRequest.FromString,
                    response_serializer=tenant__management__pb2.PrivateWorkerGroup.SerializeToString,
            ),
            'ListWorkerGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWorkerGroups,
                    request_deserializer=tenant__management__pb2.ListWorkerGroupsRequest.FromString,
                    response_serializer=tenant__management__pb2.ListWorkerGroupsResponse.SerializeToString,
            ),
            'DeleteWorkerGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteWorkerGroup,
                    request_deserializer=tenant__management__pb2.DeleteWorkerGroupRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'versoscale.TenantManagementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TenantManagementService(object):
    """Service definition for the Tenant & User Management Service.
    This service is the central authority for all multi-tenancy constructs
    within the VersoScale platform. As outlined in the enterprise roadmap, it is
    responsible for the entire lifecycle of tenants, the users within them, and
    the resources they are allocated.

    It handles:
    - Tenant Lifecycle: Onboarding, configuration, and offboarding of customer organizations.
    - User Management: Provisioning users within a tenant and managing their roles (RBAC).
    - Resource Quotas: Enforcing limits on jobs, workers, and compute time.
    - Private Compute: Managing tenant-specific worker groups for BYOC deployments.
    - Authentication: Managing API keys for programmatic access to the platform.
    --- NEW Unauthenticated Onboarding Method ---
    """

    @staticmethod
    def OnboardNewTenant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.TenantManagementService/OnboardNewTenant',
            tenant__management__pb2.OnboardNewTenantRequest.SerializeToString,
            tenant__management__pb2.OnboardNewTenantResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTenant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.TenantManagementService/CreateTenant',
            tenant__management__pb2.CreateTenantRequest.SerializeToString,
            tenant__management__pb2.Tenant.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTenant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.TenantManagementService/GetTenant',
            tenant__management__pb2.GetTenantRequest.SerializeToString,
            tenant__management__pb2.Tenant.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTenant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.TenantManagementService/UpdateTenant',
            tenant__management__pb2.UpdateTenantRequest.SerializeToString,
            tenant__management__pb2.Tenant.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTenant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.TenantManagementService/DeleteTenant',
            tenant__management__pb2.DeleteTenantRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTenantConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.TenantManagementService/UpdateTenantConfiguration',
            tenant__management__pb2.UpdateTenantConfigurationRequest.SerializeToString,
            tenant__management__pb2.TenantConfiguration.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddUserToTenant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.TenantManagementService/AddUserToTenant',
            tenant__management__pb2.AddUserToTenantRequest.SerializeToString,
            tenant__management__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.TenantManagementService/GetUser',
            tenant__management__pb2.GetUserRequest.SerializeToString,
            tenant__management__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.TenantManagementService/ListUsers',
            tenant__management__pb2.ListUsersRequest.SerializeToString,
            tenant__management__pb2.ListUsersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveUserFromTenant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.TenantManagementService/RemoveUserFromTenant',
            tenant__management__pb2.RemoveUserFromTenantRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateApiKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.TenantManagementService/CreateApiKey',
            tenant__management__pb2.CreateApiKeyRequest.SerializeToString,
            tenant__management__pb2.CreateApiKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListApiKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.TenantManagementService/ListApiKeys',
            tenant__management__pb2.ListApiKeysRequest.SerializeToString,
            tenant__management__pb2.ListApiKeysResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteApiKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.TenantManagementService/DeleteApiKey',
            tenant__management__pb2.DeleteApiKeyRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateWorkerGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.TenantManagementService/CreateWorkerGroup',
            tenant__management__pb2.CreateWorkerGroupRequest.SerializeToString,
            tenant__management__pb2.PrivateWorkerGroup.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListWorkerGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.TenantManagementService/ListWorkerGroups',
            tenant__management__pb2.ListWorkerGroupsRequest.SerializeToString,
            tenant__management__pb2.ListWorkerGroupsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteWorkerGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/versoscale.TenantManagementService/DeleteWorkerGroup',
            tenant__management__pb2.DeleteWorkerGroupRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
